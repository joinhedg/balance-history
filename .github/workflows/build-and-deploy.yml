name: CI

# 1
# Controls when the workflow will run.
on:
  [push]
  # Triggers the workflow on push events but only for the master branch

#2
env:
  REPO_NAME: ${{github.event.repository.name}}

#3 git clone or pull changes and run docker compose on the VPS
jobs:
  pull-changes:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: git clone repo
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.DEPLOY_HOST}} # IP address of the server you wish to ssh into
          username: ${{secrets.DEPLOY_USERNAME}} # User of the server you want to ssh into
          key: ${{secrets.DEPLOY_KEY}} # Private key of the server
          envs: REPO_NAME
          script: |
            # Cd into repo and pull changes
            cd app/${{ env.REPO_NAME }} && git pull
            
            # Update.env
            : > .env
            touch .env
            echo POSTGRES_USERNAME=${{secrets.POSTGRES_USERNAME}} >>.env
            echo POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} >>.env
            echo POSTGRES_HOSTNAME=${{secrets.POSTGRES_HOSTNAME}} >>.env
            echo POSTGRES_PORT=${{secrets.POSTGRES_PORT}} >>.env
            echo POSTGRES_DATABASE=${{secrets.POSTGRES_DATABASE}} >>.env
            echo X_RAPIDAPI_KEY=${{secrets.X_RAPIDAPI_KEY}} >>.env
            echo X_RAPIDAPI_HOST=${{secrets.X_RAPIDAPI_HOST}} >>.env
            echo LEMON_KEY=${{secrets.LEMON_KEY}} >>.env
            echo EOD_KEY=${{secrets.EOD_KEY}} >>.env
            echo BUBBLE_TOKEN=${{secrets.BUBBLE_TOKEN}} >>.env

  build-and-run:
    runs-on: ubuntu-latest
    needs: pull-changes
    steps:
      - uses: actions/checkout@master
      - name: docker compose build
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.DEPLOY_HOST}} # IP address of the server you wish to ssh into
          username: ${{secrets.DEPLOY_USERNAME}} # User of the server you want to ssh into
          key: ${{secrets.DEPLOY_KEY}} # Private or public key of the server
          envs: REPO_NAME
          script: |
            # Cd into repo and build + run containers
            cd app/${{ env.REPO_NAME }}

            docker stop ${{ env.REPO_NAME }}
            docker rm ${{ env.REPO_NAME }}
            docker image rm ${{ env.REPO_NAME }}
            docker build -t ${{ env.REPO_NAME }}
            docker run -p 8080:8080 ${{ env.REPO_NAME }}